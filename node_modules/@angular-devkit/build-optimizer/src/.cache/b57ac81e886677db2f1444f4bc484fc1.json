{"remainingRequest":"/home/ice_aalmeida/prj/treinamento-automacao/Projeto_UI_Automation_Web/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--8-1!/home/ice_aalmeida/prj/treinamento-automacao/Projeto_UI_Automation_Web/node_modules/ng2-currency-mask/src/input.handler.js","dependencies":[{"path":"/home/ice_aalmeida/prj/treinamento-automacao/Projeto_UI_Automation_Web/node_modules/ng2-currency-mask/src/input.handler.js","mtime":1576146517188},{"path":"/home/ice_aalmeida/prj/treinamento-automacao/Projeto_UI_Automation_Web/node_modules/cache-loader/dist/cjs.js","mtime":1576146516685},{"path":"/home/ice_aalmeida/prj/treinamento-automacao/Projeto_UI_Automation_Web/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1576146515773}],"contextDependencies":[],"result":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar input_service_1 = require(\"./input.service\");\nvar InputHandler = /*@__PURE__*/ (function () {\n    function InputHandler(htmlInputElement, options) {\n        this.inputService = new input_service_1.InputService(htmlInputElement, options);\n    }\n    InputHandler.prototype.handleCut = function (event) {\n        var _this = this;\n        setTimeout(function () {\n            _this.inputService.updateFieldValue();\n            _this.setValue(_this.inputService.value);\n            _this.onModelChange(_this.inputService.value);\n        }, 0);\n    };\n    InputHandler.prototype.handleInput = function (event) {\n        var keyCode = this.inputService.rawValue.charCodeAt(this.inputService.rawValue.length - 1);\n        var rawValueLength = this.inputService.rawValue.length;\n        var rawValueSelectionEnd = this.inputService.inputSelection.selectionEnd;\n        var storedRawValueLength = this.inputService.storedRawValue.length;\n        this.inputService.rawValue = this.inputService.storedRawValue;\n        if (rawValueLength != rawValueSelectionEnd || Math.abs(rawValueLength - storedRawValueLength) != 1) {\n            this.setCursorPosition(event);\n            return;\n        }\n        if (rawValueLength < storedRawValueLength) {\n            if (this.inputService.value != 0) {\n                this.inputService.removeNumber(8);\n            }\n            else {\n                this.setValue(null);\n            }\n        }\n        if (rawValueLength > storedRawValueLength) {\n            switch (keyCode) {\n                case 43:\n                    this.inputService.changeToPositive();\n                    break;\n                case 45:\n                    this.inputService.changeToNegative();\n                    break;\n                default:\n                    if (!this.inputService.canInputMoreNumbers || (isNaN(this.inputService.value) && String.fromCharCode(keyCode).match(/\\d/) == null)) {\n                        return;\n                    }\n                    this.inputService.addNumber(keyCode);\n            }\n        }\n        this.setCursorPosition(event);\n        this.onModelChange(this.inputService.value);\n    };\n    InputHandler.prototype.handleKeydown = function (event) {\n        var keyCode = event.which || event.charCode || event.keyCode;\n        if (keyCode == 8 || keyCode == 46 || keyCode == 63272) {\n            event.preventDefault();\n            var selectionRangeLength = Math.abs(this.inputService.inputSelection.selectionEnd - this.inputService.inputSelection.selectionStart);\n            if (selectionRangeLength == this.inputService.rawValue.length || this.inputService.value == 0) {\n                this.setValue(null);\n                this.onModelChange(this.inputService.value);\n            }\n            if (selectionRangeLength == 0 && !isNaN(this.inputService.value)) {\n                this.inputService.removeNumber(keyCode);\n                this.onModelChange(this.inputService.value);\n            }\n        }\n    };\n    InputHandler.prototype.handleKeypress = function (event) {\n        var keyCode = event.which || event.charCode || event.keyCode;\n        if (keyCode == undefined || [9, 13].indexOf(keyCode) != -1 || this.isArrowEndHomeKeyInFirefox(event)) {\n            return;\n        }\n        switch (keyCode) {\n            case 43:\n                this.inputService.changeToPositive();\n                break;\n            case 45:\n                this.inputService.changeToNegative();\n                break;\n            default:\n                if (this.inputService.canInputMoreNumbers && (!isNaN(this.inputService.value) || String.fromCharCode(keyCode).match(/\\d/) != null)) {\n                    this.inputService.addNumber(keyCode);\n                }\n        }\n        event.preventDefault();\n        this.onModelChange(this.inputService.value);\n    };\n    InputHandler.prototype.handlePaste = function (event) {\n        var _this = this;\n        setTimeout(function () {\n            _this.inputService.updateFieldValue();\n            _this.setValue(_this.inputService.value);\n            _this.onModelChange(_this.inputService.value);\n        }, 1);\n    };\n    InputHandler.prototype.updateOptions = function (options) {\n        this.inputService.updateOptions(options);\n    };\n    InputHandler.prototype.getOnModelChange = function () {\n        return this.onModelChange;\n    };\n    InputHandler.prototype.setOnModelChange = function (callbackFunction) {\n        this.onModelChange = callbackFunction;\n    };\n    InputHandler.prototype.getOnModelTouched = function () {\n        return this.onModelTouched;\n    };\n    InputHandler.prototype.setOnModelTouched = function (callbackFunction) {\n        this.onModelTouched = callbackFunction;\n    };\n    InputHandler.prototype.setValue = function (value) {\n        this.inputService.value = value;\n    };\n    InputHandler.prototype.isArrowEndHomeKeyInFirefox = function (event) {\n        if ([35, 36, 37, 38, 39, 40].indexOf(event.keyCode) != -1 && (event.charCode == undefined || event.charCode == 0)) {\n            return true;\n        }\n        return false;\n    };\n    InputHandler.prototype.setCursorPosition = function (event) {\n        setTimeout(function () {\n            event.target.setSelectionRange(event.target.value.length, event.target.value.length);\n        }, 0);\n    };\n    return InputHandler;\n}());\nexports.InputHandler = InputHandler;\n",null]}